@startuml
skinparam classAttributeIconSize 0

package "Presentation" #DDDDDD {
class ServiceSolicitationUI<<presentation>>{

}
}


package "Application" #DDDDDD {
class ServiceSolicitationController<<application>>{
+create()
+getCataloguesByUser()
+getServicesByCatalogue(oCatalogue)
+addResponse(response)
+addTicket(service, urgency, \nlimitDate, creationDate, lstFiles)
+saveTicket(ticket)
}

class ServiceSolicitationService<<application>>{
+create()
+createActivityFluxExecution(service)
+createAndValidateResponse(form, lstAnswer)
}

}


package "Domain" #DDDDDD {
class Service<<Entity>><<Root>>{
+create()
}

class Form<<Entity>><<Root>>{
+create(name, formType, attributeList)
}

class Attribute<<Entity>>{
+create(name, label, description, regex, scriptPath, dataType
}

class Catalogue<<Entity>><<Root>>{
+create()
}

class ActivityFlux<<Entity>><<Root>>{
+create()
}

class ActivityFluxExecution<<Entity>><<Root>>{
+create()
}

class Task<<Entity>><<Root>>{
+create(description, priority)
}

class ManualTask<<Entity>>{
+create(description, priority, form)
}

class AutomaticTask<<Entity>>{
+create(description, priority, script)
}

class TaskExecution<<Entity>><<Root>>{
+create()
}

class ManualTaskExecution<<Entity>>{
+create()
}

class AutomaticTaskExecution<<Entity>>{
+create()
}

class Ticket<<Entity>><<Root>>{
+create(service, urgency, limitDate,\n creationDate, lstFiles, lstResponses)
}

class TicketUrgency<<Value Object>>{
+create(ticketUrgency)
-validate(ticketUrgency)
}

class TicketLimitDate<<Value Object>>{
+create(ticketLimitDate)
-validate(ticketLimitDate)
}

class TicketCreationDate<<Value Object>>{
+create(ticketCreationDate)
-validate(ticketCreationDate)
}

class TicketFile<<Value Object>>{
+create(ticketFile)
-validate(ticketFile)
}

class Response<<Value Object>>{
+create(response)
-validate(response)
}
}

package Persistence #DDDDDD {
class PersistenceContext<<persistence>>{
+repositories()
}

class AppSettings<<persistence>>{
+instance()
+getRepositoryFactory()
}

package Factory #DDDDDD {
class RepositoryFactory<<persistence>>{
+create()
+servicos()
+catalogos()
+formularios()
}
}

package "Grammar" #DDDDDD {

class ScriptAlgorithms<<grammar>>{
+executeValidateForm(response, mode)
}

class ValidateFormLexer<<grammar>>{
+create()
}

class CommonTokenStream<<grammar>>{
+create()
}

class ValidateFormParser<<grammar>>{
+create()
}

class ParseTree<<grammar>>{
+create()
}

class ParseTreeWalker<<grammar>>{
+create()
}

class FormListener<<grammar>>{
+create()
}

class FormVisitor<<grammar>>{
 +create()
 }

}

package "Repository" #DDDDDD {

class ServiceRepository<<repository>>{
+create()
+findByCatalogue(oCatalogue)
}

class TicketRepository<<repository>>{
+create()
+save(ticket)
}

class ResponseRepository<<repository>>{
+create()
+save(response)
}

class CatalogueRepository<<repository>>{
+create()
}

class CollaboratorRepository<<repository>>{
+create()
+findByUser(user)
}

class TaskRepository<<repository>>{
+create()
}

class TaskExecutionRepository<<repository>>{
+create()
}

class ManualTaskRepository<<repository>>{
+create()
}

class AutomaticTaskRepository<<repository>>{
+create()
}

interface AutomaticTaskRepositoryInterface{

}

interface ManualTaskRepositoryInterface{

}

interface TaskExecutionRepositoryInterface{

}

interface TaskRepositoryInterface{

}

interface CollaboratorRepositoryInterface{

}

interface CatalogueRepositoryInterface{

}

interface TicketRepositoryInterface{

}

interface ServiceRepositoryInterface{

}

interface ResponseRepositoryInterface{

}

}



ServiceSolicitationUI ..> ServiceSolicitationController
ServiceSolicitationController ..> PersistenceContext
ServiceSolicitationController ..> ServiceSolicitationService


ServiceSolicitationService ..> TaskRepository
ServiceSolicitationService ..> ManualTaskRepository
ServiceSolicitationService ..> AutomaticTaskRepository
ServiceSolicitationService ..> TaskExecutionRepository
ServiceSolicitationService ..> ScriptAlgorithms

ServiceRepository ..> ServiceRepositoryInterface
TicketRepository ..> TicketRepositoryInterface
CatalogueRepository ..> CatalogueRepositoryInterface
CollaboratorRepository ..> CollaboratorRepositoryInterface
TaskRepository ..> TaskRepositoryInterface
ManualTaskRepository ..> ManualTaskRepositoryInterface
AutomaticTaskRepository ..> AutomaticTaskRepositoryInterface
TaskExecutionRepository ..> TaskExecutionRepositoryInterface
ResponseRepository ..> ResponseRepositoryInterface

ScriptAlgorithms ..> ValidateFormLexer
ScriptAlgorithms ..> CommonTokenStream
ScriptAlgorithms ..> ValidateFormParser
ScriptAlgorithms ..> ParseTree
ScriptAlgorithms ..> ParseTreeWalker
ScriptAlgorithms ..> FormListener
ScriptAlgorithms ..> FormVisitor

AppSettings -> RepositoryFactory : creates
PersistenceContext -> AppSettings : implements

RepositoryFactory "1" -> "1" ServiceRepository : has
RepositoryFactory "1" -> "1" TicketRepository : has
RepositoryFactory "1" -> "1" CatalogueRepository : has
RepositoryFactory "1" -> "1" CollaboratorRepository : has
RepositoryFactory "1" -> "1" ResponseRepository : has
RepositoryFactory "1" -> "1" TaskRepository : has
RepositoryFactory "1" -> "1" ManualTaskRepository : has
RepositoryFactory "1" -> "1" AutomaticTaskRepository : has
RepositoryFactory "1" -> "1" TaskExecutionRepository : has

ServiceRepository "1" -> "*" Service : saves
TicketRepository "1" -> "*" Ticket : saves
CatalogueRepository "1" -> "*" Catalogue : saves
ResponseRepository "1" -> "*" Response : saves

Catalogue "1" -> "*" Service : has
Service "1" -> "*" Form : has
Form "1" -> "1..*" Attribute : has

Ticket "1" -> "1..*" Service : has
Ticket "1" -> "1..*" TicketUrgency : has
Ticket "1" -> "1..*" TicketLimitDate : has
Ticket "1" -> "1..*" TicketCreationDate : has
Ticket "1" -> "1..*" TicketFile : has
Ticket "1" -> "1..*" Response : has

ManualTask -|> Task : is a
AutomaticTask -|> Task : is a

ManualTaskExecution -|> TaskExecution : is a
AutomaticTaskExecution -|> TaskExecution : is a

ActivityFlux "1" -> "1..*" Task : has
ActivityFluxExecution "1" -> "1..*" TaskExecution : has

@enduml
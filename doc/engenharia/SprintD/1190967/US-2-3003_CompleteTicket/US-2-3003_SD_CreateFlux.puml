@startuml
autonumber
hide footbox

participant "<<application>>\nServiceSolicitationService" as SRV
participant "<<domain>>\nService" as S
participant "<<domain>>\nActivityFlux" as AF
participant "<<domain>>\nTask" as TASK
database "<<repository>>\nManualTaskRepository" as MTR
database "<<repository>>\nAutomaticTaskRepository" as ATR
participant "<<domain>>\nManualTaskExecution" as MTE
participant "<<domain>>\nAutomaticTaskExecution" as ATE
participant "<<domain>>\nTaskExecution" as TASKE
participant "<<domain>>\nActivityFluxExecution" as AFE
database "<<repository>>\nTaskExecutionRepository" as TER
database "<<repository>>\nActivityFluxExecutionRepository" as AFER
participant "<<domain>>\nActivityFlowClient" as AFC
participant "<<domain>>\nAutomaticTaskExecutionProgress" as PROG
participant "<<domain>>\nManualTask" as MT
participant "<<domain>>\nAutomaticTask" as AT
participant "<<domain>>\nResponse" as RS
participant "<<persistence>>\nPersistenceContext" as PC
participant "<<persistence>>\nAppSettings" as AS
participant "<<factory>>\nRepositoryFactory" as RF
participant "<<domain>>\nCatalogue" as C
participant "<<domain>>\nAttribute" as A
participant "<<domain>>\nForm" as F

[o-> SRV : createActivityFluxExecution(service)
activate SRV

SRV -> S : flux()
activate S

S -> AF : flux()
activate AF

AF --> S : activityFlux
deactivate AF

S --> SRV : activityFlux
deactivate AF
deactivate S

loop while there is tasks in the activityFlux

SRV -> TASK : id()
activate TASK

TASK --> SRV : id
deactivate TASK

SRV -> MTR : isManualTask(id)
activate MTR

MTR --> SRV : manualFlag
deactivate MTR

alt if the task is a manual task (manualFlag == true)

SRV -> MTE** : create(t, status, result)
activate MTE

MTE -> TASKE** : create(status, result)
deactivate MTE

SRV -> TER : save(manualTask)
activate TER

TER --> SRV : manualTask
deactivate TER
deactivate TER

else

SRV -> ATR : isAutoTask(id)
activate ATR

ATR --> SRV : autoFlag
deactivate ATR

alt if the task is a automatic task (autoFlag == true)

SRV -> ATE** : create(autoTask, status, result)
activate ATE

ATE -> TASKE** : create(status, result)
deactivate ATE

SRV -> TER : save(t)
activate TER

TER --> SRV : autoTask
deactivate TER

end

end

SRV -> AFE** : create(progress, lstFlux)


SRV -> AFER : save(activityFluxExec)
activate AFER

AFER --> SRV : activityFluxExec
deactivate AFER

<- SRV : activityFluxExec
deactivate SRV

@enduml

